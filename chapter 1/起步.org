#+TITLE:Chapter 1. 起步
* 起步
** 什么是版本控制（Version Control）
[[https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6][起步-关于版本控制]]

_版本控制_ 是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的 *系统* 。
** 安装 Git
[[https://git-scm.com/][下载地址]]

** 初次运行 Git 前的配置
[[https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE][起步 - 初次运行 Git 前的配置]]

既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。 每台计算机上只需要配置一次，程序升级时会保留配置信息。 你可以在任何时候再次通过运行命令来修改它们。

*** 配置文件
Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。

这些变量存储在三个不同的位置：
1. 文件目录： =/etc/gitconfig= / =C:\Documents and Settings\All Users\Application Data\Git\config= 。 包含系统上每一个用户及他们仓库的通用配置。 =--system= 选项
2. 文件目录： =~/.gitconfig= 或 =~/.config/git/config= / =C:\Users\$USER= 。 只针对当前用户。 =--global= 选项
3. 文件目录： =.git/config= 。 针对该仓库。

*** 用户信息
当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：

#+BEGIN_EXAMPLE
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
#+END_EXAMPLE

** Git 基础
[[https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E5%9F%BA%E7%A1%80][起步 - Git 基础]]

*** Git与其他版本控制器的差异
Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git对待数据的方法。 

概念上来区分，其它大部分系统以 *文件变更列表* 的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。

[[./img/deltas.png][图1. 存储每个文件与初始版本的差异]]

Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的 /索引/ 。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git 对待数据更像是一个 *快照流* 。

[[./img/snapshots.png][图2. 存储项目随时间改变的快照]]

这是 Git 与几乎所有其它版本控制系统的重要区别。

*** 近乎所有操作都是本地执行
在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。

*** Git 保证完整性
Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。

Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中 *文件的内容或目录结构* 计算出来。

SHA-1 哈希看起来是这样：
#+BEGIN_EXAMPLE
24b9da6552252987aa493b52f8696cd6d3b00373
#+END_EXAMPLE
_实际上， Git 数据库中保存的信息都是以文件内容的 *哈希值* 来 /索引/ ，而不是文件名。_

*** Git 一般只添加数据
你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。

这使得我们使用 Git 成为一个安心愉悦的过程，因为我们深知可以尽情做各种尝试，而没有把事情弄糟的危险。
*** Git中文件的三种状态
Git 有 *三种状态* ，你的文件可能处于其中之一： _已提交（committed）_ 、 _已修改（modified)_ 和 _已暂存（staged）_ 。

+ 已提交表示数据已经安全的保存在本地数据库中。
+ 已修改表示修改了文件，但还没保存到数据库中。
+ 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。

由此引入 Git 项目的三个工作区域的概念： _Git 仓库(repository）_ 、 _工作目录（working tree）_ 以及 _暂存区域（staging area/ index)_ 。

[[./img/areas.png][图3. 工作目录、暂存区域以及 Git 仓库.]]

+ _Git 仓库_ 目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是  Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。
+ _工作目录_ 是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。
+ _暂存区域_ 是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作‘索引（index）’，不过一般说法还是叫暂存区域。

*基本的 Git 工作流程* 如下：
1. 在工作目录中修改文件。
2. 暂存文件，将文件的快照放入暂存区域。
3. 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。

*文件状态的判断*
+ 如果 Git 目录中保存着特定版本的文件，就属于已提交状态。 
+ 如果作了修改并已放入暂存区域，就属于已暂存状态。
+ 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。
** 获取帮助
[[https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E8%8E%B7%E5%8F%96%E5%B8%AE%E5%8A%A9][起步 - 获取帮助]]

若你使用 Git 时需要获取帮助，有三种方法可以找到 Git 命令的使用手册：
#+BEGIN_EXAMPLE
$ git help <verb>
$ git <verb> --help
$ man git-<verb>
#+END_EXAMPLE
